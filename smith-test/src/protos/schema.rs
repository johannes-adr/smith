// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/protos/schema.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:SomeMessage)
pub struct SomeMessage {
    // message fields
    // @@protoc_insertion_point(field:SomeMessage.person)
    pub person: ::std::vec::Vec<some_message::Person>,
    // special fields
    // @@protoc_insertion_point(special_field:SomeMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SomeMessage {
    fn default() -> &'a SomeMessage {
        <SomeMessage as ::protobuf::Message>::default_instance()
    }
}

impl SomeMessage {
    pub fn new() -> SomeMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "person",
            |m: &SomeMessage| { &m.person },
            |m: &mut SomeMessage| { &mut m.person },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SomeMessage>(
            "SomeMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SomeMessage {
    const NAME: &'static str = "SomeMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.person.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.person {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.person {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SomeMessage {
        SomeMessage::new()
    }

    fn clear(&mut self) {
        self.person.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SomeMessage {
        static instance: SomeMessage = SomeMessage {
            person: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SomeMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SomeMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SomeMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SomeMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `SomeMessage`
pub mod some_message {
    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:SomeMessage.Friends)
    pub struct Friends {
        // message fields
        // @@protoc_insertion_point(field:SomeMessage.Friends.id)
        pub id: u32,
        // @@protoc_insertion_point(field:SomeMessage.Friends.name)
        pub name: ::std::string::String,
        // special fields
        // @@protoc_insertion_point(special_field:SomeMessage.Friends.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Friends {
        fn default() -> &'a Friends {
            <Friends as ::protobuf::Message>::default_instance()
        }
    }

    impl Friends {
        pub fn new() -> Friends {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(2);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "id",
                |m: &Friends| { &m.id },
                |m: &mut Friends| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Friends| { &m.name },
                |m: &mut Friends| { &mut m.name },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Friends>(
                "SomeMessage.Friends",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Friends {
        const NAME: &'static str = "Friends";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.id = is.read_uint32()?;
                    },
                    18 => {
                        self.name = is.read_string()?;
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.id != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.id);
            }
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(2, &self.name);
            }
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.id != 0 {
                os.write_uint32(1, self.id)?;
            }
            if !self.name.is_empty() {
                os.write_string(2, &self.name)?;
            }
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Friends {
            Friends::new()
        }

        fn clear(&mut self) {
            self.id = 0;
            self.name.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Friends {
            static instance: Friends = Friends {
                id: 0,
                name: ::std::string::String::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Friends {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SomeMessage.Friends").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Friends {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Friends {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }

    #[derive(PartialEq,Clone,Default,Debug)]
    // @@protoc_insertion_point(message:SomeMessage.Person)
    pub struct Person {
        // message fields
        // @@protoc_insertion_point(field:SomeMessage.Person.index)
        pub index: u32,
        // @@protoc_insertion_point(field:SomeMessage.Person.alive)
        pub alive: bool,
        // @@protoc_insertion_point(field:SomeMessage.Person.isActive)
        pub isActive: bool,
        // @@protoc_insertion_point(field:SomeMessage.Person.picture)
        pub picture: ::std::string::String,
        // @@protoc_insertion_point(field:SomeMessage.Person.age)
        pub age: u32,
        // @@protoc_insertion_point(field:SomeMessage.Person.name)
        pub name: ::std::string::String,
        // @@protoc_insertion_point(field:SomeMessage.Person.latitude)
        pub latitude: f32,
        // @@protoc_insertion_point(field:SomeMessage.Person.longitude)
        pub longitude: f32,
        // @@protoc_insertion_point(field:SomeMessage.Person.friends)
        pub friends: ::std::vec::Vec<Friends>,
        // special fields
        // @@protoc_insertion_point(special_field:SomeMessage.Person.special_fields)
        pub special_fields: ::protobuf::SpecialFields,
    }

    impl<'a> ::std::default::Default for &'a Person {
        fn default() -> &'a Person {
            <Person as ::protobuf::Message>::default_instance()
        }
    }

    impl Person {
        pub fn new() -> Person {
            ::std::default::Default::default()
        }

        pub(in super) fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
            let mut fields = ::std::vec::Vec::with_capacity(9);
            let mut oneofs = ::std::vec::Vec::with_capacity(0);
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "index",
                |m: &Person| { &m.index },
                |m: &mut Person| { &mut m.index },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "alive",
                |m: &Person| { &m.alive },
                |m: &mut Person| { &mut m.alive },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "isActive",
                |m: &Person| { &m.isActive },
                |m: &mut Person| { &mut m.isActive },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "picture",
                |m: &Person| { &m.picture },
                |m: &mut Person| { &mut m.picture },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "age",
                |m: &Person| { &m.age },
                |m: &mut Person| { &mut m.age },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "name",
                |m: &Person| { &m.name },
                |m: &mut Person| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "latitude",
                |m: &Person| { &m.latitude },
                |m: &mut Person| { &mut m.latitude },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
                "longitude",
                |m: &Person| { &m.longitude },
                |m: &mut Person| { &mut m.longitude },
            ));
            fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
                "friends",
                |m: &Person| { &m.friends },
                |m: &mut Person| { &mut m.friends },
            ));
            ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Person>(
                "SomeMessage.Person",
                fields,
                oneofs,
            )
        }
    }

    impl ::protobuf::Message for Person {
        const NAME: &'static str = "Person";

        fn is_initialized(&self) -> bool {
            true
        }

        fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
            while let Some(tag) = is.read_raw_tag_or_eof()? {
                match tag {
                    8 => {
                        self.index = is.read_uint32()?;
                    },
                    16 => {
                        self.alive = is.read_bool()?;
                    },
                    24 => {
                        self.isActive = is.read_bool()?;
                    },
                    34 => {
                        self.picture = is.read_string()?;
                    },
                    40 => {
                        self.age = is.read_uint32()?;
                    },
                    50 => {
                        self.name = is.read_string()?;
                    },
                    61 => {
                        self.latitude = is.read_float()?;
                    },
                    69 => {
                        self.longitude = is.read_float()?;
                    },
                    74 => {
                        self.friends.push(is.read_message()?);
                    },
                    tag => {
                        ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                    },
                };
            }
            ::std::result::Result::Ok(())
        }

        // Compute sizes of nested messages
        #[allow(unused_variables)]
        fn compute_size(&self) -> u64 {
            let mut my_size = 0;
            if self.index != 0 {
                my_size += ::protobuf::rt::uint32_size(1, self.index);
            }
            if self.alive != false {
                my_size += 1 + 1;
            }
            if self.isActive != false {
                my_size += 1 + 1;
            }
            if !self.picture.is_empty() {
                my_size += ::protobuf::rt::string_size(4, &self.picture);
            }
            if self.age != 0 {
                my_size += ::protobuf::rt::uint32_size(5, self.age);
            }
            if !self.name.is_empty() {
                my_size += ::protobuf::rt::string_size(6, &self.name);
            }
            if self.latitude != 0. {
                my_size += 1 + 4;
            }
            if self.longitude != 0. {
                my_size += 1 + 4;
            }
            for value in &self.friends {
                let len = value.compute_size();
                my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
            };
            my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
            self.special_fields.cached_size().set(my_size as u32);
            my_size
        }

        fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
            if self.index != 0 {
                os.write_uint32(1, self.index)?;
            }
            if self.alive != false {
                os.write_bool(2, self.alive)?;
            }
            if self.isActive != false {
                os.write_bool(3, self.isActive)?;
            }
            if !self.picture.is_empty() {
                os.write_string(4, &self.picture)?;
            }
            if self.age != 0 {
                os.write_uint32(5, self.age)?;
            }
            if !self.name.is_empty() {
                os.write_string(6, &self.name)?;
            }
            if self.latitude != 0. {
                os.write_float(7, self.latitude)?;
            }
            if self.longitude != 0. {
                os.write_float(8, self.longitude)?;
            }
            for v in &self.friends {
                ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
            };
            os.write_unknown_fields(self.special_fields.unknown_fields())?;
            ::std::result::Result::Ok(())
        }

        fn special_fields(&self) -> &::protobuf::SpecialFields {
            &self.special_fields
        }

        fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
            &mut self.special_fields
        }

        fn new() -> Person {
            Person::new()
        }

        fn clear(&mut self) {
            self.index = 0;
            self.alive = false;
            self.isActive = false;
            self.picture.clear();
            self.age = 0;
            self.name.clear();
            self.latitude = 0.;
            self.longitude = 0.;
            self.friends.clear();
            self.special_fields.clear();
        }

        fn default_instance() -> &'static Person {
            static instance: Person = Person {
                index: 0,
                alive: false,
                isActive: false,
                picture: ::std::string::String::new(),
                age: 0,
                name: ::std::string::String::new(),
                latitude: 0.,
                longitude: 0.,
                friends: ::std::vec::Vec::new(),
                special_fields: ::protobuf::SpecialFields::new(),
            };
            &instance
        }
    }

    impl ::protobuf::MessageFull for Person {
        fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| super::file_descriptor().message_by_package_relative_name("SomeMessage.Person").unwrap()).clone()
        }
    }

    impl ::std::fmt::Display for Person {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            ::protobuf::text_format::fmt(self, f)
        }
    }

    impl ::protobuf::reflect::ProtobufValue for Person {
        type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17src/protos/schema.proto\"\xe6\x02\n\x0bSomeMessage\x12+\n\x06perso\
    n\x18\x01\x20\x03(\x0b2\x13.SomeMessage.PersonR\x06person\x1a-\n\x07Frie\
    nds\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\x12\x12\n\x04name\x18\x02\
    \x20\x01(\tR\x04name\x1a\xfa\x01\n\x06Person\x12\x14\n\x05index\x18\x01\
    \x20\x01(\rR\x05index\x12\x14\n\x05alive\x18\x02\x20\x01(\x08R\x05alive\
    \x12\x1a\n\x08isActive\x18\x03\x20\x01(\x08R\x08isActive\x12\x18\n\x07pi\
    cture\x18\x04\x20\x01(\tR\x07picture\x12\x10\n\x03age\x18\x05\x20\x01(\r\
    R\x03age\x12\x12\n\x04name\x18\x06\x20\x01(\tR\x04name\x12\x1a\n\x08lati\
    tude\x18\x07\x20\x01(\x02R\x08latitude\x12\x1c\n\tlongitude\x18\x08\x20\
    \x01(\x02R\tlongitude\x12.\n\x07friends\x18\t\x20\x03(\x0b2\x14.SomeMess\
    age.FriendsR\x07friendsJ\xec\x06\n\x06\x12\x04\0\0\x16\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\n\n\x02\x04\0\x12\x04\x02\0\x16\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x02\x08\x13\n\x0c\n\x04\x04\0\x03\0\x12\x04\x04\x04\x07\
    \x05\n\x0c\n\x05\x04\0\x03\0\x01\x12\x03\x04\x0c\x13\n\r\n\x06\x04\0\x03\
    \0\x02\0\x12\x03\x05\x08\x16\n\x0e\n\x07\x04\0\x03\0\x02\0\x05\x12\x03\
    \x05\x08\x0e\n\x0e\n\x07\x04\0\x03\0\x02\0\x01\x12\x03\x05\x0f\x11\n\x0e\
    \n\x07\x04\0\x03\0\x02\0\x03\x12\x03\x05\x14\x15\n\r\n\x06\x04\0\x03\0\
    \x02\x01\x12\x03\x06\x08\x18\n\x0e\n\x07\x04\0\x03\0\x02\x01\x05\x12\x03\
    \x06\x08\x0e\n\x0e\n\x07\x04\0\x03\0\x02\x01\x01\x12\x03\x06\x0f\x13\n\
    \x0e\n\x07\x04\0\x03\0\x02\x01\x03\x12\x03\x06\x16\x17\n\x0c\n\x04\x04\0\
    \x03\x01\x12\x04\t\x04\x13\x05\n\x0c\n\x05\x04\0\x03\x01\x01\x12\x03\t\
    \x0c\x12\n\r\n\x06\x04\0\x03\x01\x02\0\x12\x03\n\x08\x19\n\x0e\n\x07\x04\
    \0\x03\x01\x02\0\x05\x12\x03\n\x08\x0e\n\x0e\n\x07\x04\0\x03\x01\x02\0\
    \x01\x12\x03\n\x0f\x14\n\x0e\n\x07\x04\0\x03\x01\x02\0\x03\x12\x03\n\x17\
    \x18\n\r\n\x06\x04\0\x03\x01\x02\x01\x12\x03\x0b\x08\x17\n\x0e\n\x07\x04\
    \0\x03\x01\x02\x01\x05\x12\x03\x0b\x08\x0c\n\x0e\n\x07\x04\0\x03\x01\x02\
    \x01\x01\x12\x03\x0b\r\x12\n\x0e\n\x07\x04\0\x03\x01\x02\x01\x03\x12\x03\
    \x0b\x15\x16\n\r\n\x06\x04\0\x03\x01\x02\x02\x12\x03\x0c\x08\x1a\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x02\x05\x12\x03\x0c\x08\x0c\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x02\x01\x12\x03\x0c\r\x15\n\x0e\n\x07\x04\0\x03\x01\x02\x02\x03\
    \x12\x03\x0c\x18\x19\n\r\n\x06\x04\0\x03\x01\x02\x03\x12\x03\r\x08\x1b\n\
    \x0e\n\x07\x04\0\x03\x01\x02\x03\x05\x12\x03\r\x08\x0e\n\x0e\n\x07\x04\0\
    \x03\x01\x02\x03\x01\x12\x03\r\x0f\x16\n\x0e\n\x07\x04\0\x03\x01\x02\x03\
    \x03\x12\x03\r\x19\x1a\n\r\n\x06\x04\0\x03\x01\x02\x04\x12\x03\x0e\x08\
    \x17\n\x0e\n\x07\x04\0\x03\x01\x02\x04\x05\x12\x03\x0e\x08\x0e\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x04\x01\x12\x03\x0e\x0f\x12\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x04\x03\x12\x03\x0e\x15\x16\n\r\n\x06\x04\0\x03\x01\x02\x05\x12\
    \x03\x0f\x08\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x05\x12\x03\x0f\x08\
    \x0e\n\x0e\n\x07\x04\0\x03\x01\x02\x05\x01\x12\x03\x0f\x0f\x13\n\x0e\n\
    \x07\x04\0\x03\x01\x02\x05\x03\x12\x03\x0f\x16\x17\n\r\n\x06\x04\0\x03\
    \x01\x02\x06\x12\x03\x10\x08\x1b\n\x0e\n\x07\x04\0\x03\x01\x02\x06\x05\
    \x12\x03\x10\x08\r\n\x0e\n\x07\x04\0\x03\x01\x02\x06\x01\x12\x03\x10\x0e\
    \x16\n\x0e\n\x07\x04\0\x03\x01\x02\x06\x03\x12\x03\x10\x19\x1a\n\r\n\x06\
    \x04\0\x03\x01\x02\x07\x12\x03\x11\x08\x1c\n\x0e\n\x07\x04\0\x03\x01\x02\
    \x07\x05\x12\x03\x11\x08\r\n\x0e\n\x07\x04\0\x03\x01\x02\x07\x01\x12\x03\
    \x11\x0e\x17\n\x0e\n\x07\x04\0\x03\x01\x02\x07\x03\x12\x03\x11\x1a\x1b\n\
    \r\n\x06\x04\0\x03\x01\x02\x08\x12\x03\x12\x08%\n\x0e\n\x07\x04\0\x03\
    \x01\x02\x08\x04\x12\x03\x12\x08\x10\n\x0e\n\x07\x04\0\x03\x01\x02\x08\
    \x06\x12\x03\x12\x11\x18\n\x0e\n\x07\x04\0\x03\x01\x02\x08\x01\x12\x03\
    \x12\x19\x20\n\x0e\n\x07\x04\0\x03\x01\x02\x08\x03\x12\x03\x12#$\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\x15\x04\x1f\n\x0c\n\x05\x04\0\x02\0\x04\x12\x03\
    \x15\x04\x0c\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x15\r\x13\n\x0c\n\x05\
    \x04\0\x02\0\x01\x12\x03\x15\x14\x1a\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\
    \x15\x1d\x1eb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(SomeMessage::generated_message_descriptor_data());
            messages.push(some_message::Friends::generated_message_descriptor_data());
            messages.push(some_message::Person::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
