<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="107"><g><title>libsystem_kernel.dylib`__mmap (1 samples, 0.93%)</title><rect x="0.0000%" y="549" width="0.9346%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 1.87%)</title><rect x="1.8692%" y="213" width="1.8692%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="2.1192%" y="223.50">l..</text></g><g><title>smith-test`DYLD-STUB$$memcpy (1 samples, 0.93%)</title><rect x="3.7383%" y="213" width="0.9346%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="1"/><text x="3.9883%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.93%)</title><rect x="6.5421%" y="181" width="0.9346%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="1"/><text x="6.7921%" y="191.50"></text></g><g><title>smith-test`&lt;json5::de::Map as serde::de::MapAccess&gt;::next_key_seed (8 samples, 7.48%)</title><rect x="0.9346%" y="293" width="7.4766%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="8"/><text x="1.1846%" y="303.50">smith-test..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeMap&gt;::serialize_key (7 samples, 6.54%)</title><rect x="1.8692%" y="277" width="6.5421%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="7"/><text x="2.1192%" y="287.50">smith-tes..</text></g><g><title>smith-test`smith_core::ser::string_serializer::StringSerializer::get (7 samples, 6.54%)</title><rect x="1.8692%" y="261" width="6.5421%" height="15" fill="rgb(207,160,47)" fg:x="2" fg:w="7"/><text x="2.1192%" y="271.50">smith-tes..</text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (7 samples, 6.54%)</title><rect x="1.8692%" y="245" width="6.5421%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="7"/><text x="2.1192%" y="255.50">smith-tes..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (7 samples, 6.54%)</title><rect x="1.8692%" y="229" width="6.5421%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="7"/><text x="2.1192%" y="239.50">smith-tes..</text></g><g><title>smith-test`json5::de::parse_string (4 samples, 3.74%)</title><rect x="4.6729%" y="213" width="3.7383%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="4"/><text x="4.9229%" y="223.50">smit..</text></g><g><title>smith-test`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.87%)</title><rect x="6.5421%" y="197" width="1.8692%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="2"/><text x="6.7921%" y="207.50">s..</text></g><g><title>smith-test`DYLD-STUB$$malloc (1 samples, 0.93%)</title><rect x="7.4766%" y="181" width="0.9346%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="1"/><text x="7.7266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.93%)</title><rect x="8.4112%" y="261" width="0.9346%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="1"/><text x="8.6612%" y="271.50"></text></g><g><title>smith-test`&lt;serde_transcode::Visitor&lt;S&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 3.74%)</title><rect x="11.2150%" y="229" width="3.7383%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="4"/><text x="11.4650%" y="239.50">smit..</text></g><g><title>smith-test`&lt;json5::de::Seq as serde::de::SeqAccess&gt;::next_element_seed (4 samples, 3.74%)</title><rect x="11.2150%" y="213" width="3.7383%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="4"/><text x="11.4650%" y="223.50">smit..</text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (3 samples, 2.80%)</title><rect x="12.1495%" y="197" width="2.8037%" height="15" fill="rgb(231,73,38)" fg:x="13" fg:w="3"/><text x="12.3995%" y="207.50">sm..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (3 samples, 2.80%)</title><rect x="12.1495%" y="181" width="2.8037%" height="15" fill="rgb(225,20,46)" fg:x="13" fg:w="3"/><text x="12.3995%" y="191.50">sm..</text></g><g><title>smith-test`&lt;serde_transcode::Visitor&lt;S&gt; as serde::de::Visitor&gt;::visit_map (3 samples, 2.80%)</title><rect x="12.1495%" y="165" width="2.8037%" height="15" fill="rgb(210,31,41)" fg:x="13" fg:w="3"/><text x="12.3995%" y="175.50">sm..</text></g><g><title>smith-test`&lt;json5::de::Map as serde::de::MapAccess&gt;::next_value_seed (3 samples, 2.80%)</title><rect x="12.1495%" y="149" width="2.8037%" height="15" fill="rgb(221,200,47)" fg:x="13" fg:w="3"/><text x="12.3995%" y="159.50">sm..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeMap&gt;::serialize_value (3 samples, 2.80%)</title><rect x="12.1495%" y="133" width="2.8037%" height="15" fill="rgb(226,26,5)" fg:x="13" fg:w="3"/><text x="12.3995%" y="143.50">sm..</text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (3 samples, 2.80%)</title><rect x="12.1495%" y="117" width="2.8037%" height="15" fill="rgb(249,33,26)" fg:x="13" fg:w="3"/><text x="12.3995%" y="127.50">sm..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (3 samples, 2.80%)</title><rect x="12.1495%" y="101" width="2.8037%" height="15" fill="rgb(235,183,28)" fg:x="13" fg:w="3"/><text x="12.3995%" y="111.50">sm..</text></g><g><title>smith-test`json5::de::parse_string (3 samples, 2.80%)</title><rect x="12.1495%" y="85" width="2.8037%" height="15" fill="rgb(221,5,38)" fg:x="13" fg:w="3"/><text x="12.3995%" y="95.50">sm..</text></g><g><title>smith-test`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.87%)</title><rect x="13.0841%" y="69" width="1.8692%" height="15" fill="rgb(247,18,42)" fg:x="14" fg:w="2"/><text x="13.3341%" y="79.50">s..</text></g><g><title>smith-test`alloc::raw_vec::finish_grow (2 samples, 1.87%)</title><rect x="13.0841%" y="53" width="1.8692%" height="15" fill="rgb(241,131,45)" fg:x="14" fg:w="2"/><text x="13.3341%" y="63.50">s..</text></g><g><title>libsystem_malloc.dylib`nanov2_size (2 samples, 1.87%)</title><rect x="13.0841%" y="37" width="1.8692%" height="15" fill="rgb(249,31,29)" fg:x="14" fg:w="2"/><text x="13.3341%" y="47.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.93%)</title><rect x="15.8879%" y="149" width="0.9346%" height="15" fill="rgb(225,111,53)" fg:x="17" fg:w="1"/><text x="16.1379%" y="159.50"></text></g><g><title>smith-test`&lt;serde_transcode::Visitor&lt;S&gt; as serde::de::Visitor&gt;::visit_map (18 samples, 16.82%)</title><rect x="0.9346%" y="309" width="16.8224%" height="15" fill="rgb(238,160,17)" fg:x="1" fg:w="18"/><text x="1.1846%" y="319.50">smith-test`&lt;serde_transcod..</text></g><g><title>smith-test`&lt;json5::de::Map as serde::de::MapAccess&gt;::next_value_seed (10 samples, 9.35%)</title><rect x="8.4112%" y="293" width="9.3458%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="10"/><text x="8.6612%" y="303.50">smith-test`&lt;j..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeMap&gt;::serialize_value (10 samples, 9.35%)</title><rect x="8.4112%" y="277" width="9.3458%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="10"/><text x="8.6612%" y="287.50">smith-test`&lt;s..</text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (9 samples, 8.41%)</title><rect x="9.3458%" y="261" width="8.4112%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="9"/><text x="9.5958%" y="271.50">smith-test`&lt;..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (9 samples, 8.41%)</title><rect x="9.3458%" y="245" width="8.4112%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="9"/><text x="9.5958%" y="255.50">smith-test`&lt;..</text></g><g><title>smith-test`json5::de::parse_string (3 samples, 2.80%)</title><rect x="14.9533%" y="229" width="2.8037%" height="15" fill="rgb(213,181,19)" fg:x="16" fg:w="3"/><text x="15.2033%" y="239.50">sm..</text></g><g><title>smith-test`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 1.87%)</title><rect x="15.8879%" y="213" width="1.8692%" height="15" fill="rgb(254,191,54)" fg:x="17" fg:w="2"/><text x="16.1379%" y="223.50">s..</text></g><g><title>smith-test`alloc::raw_vec::finish_grow (2 samples, 1.87%)</title><rect x="15.8879%" y="197" width="1.8692%" height="15" fill="rgb(241,83,37)" fg:x="17" fg:w="2"/><text x="16.1379%" y="207.50">s..</text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 1.87%)</title><rect x="15.8879%" y="181" width="1.8692%" height="15" fill="rgb(233,36,39)" fg:x="17" fg:w="2"/><text x="16.1379%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 1.87%)</title><rect x="15.8879%" y="165" width="1.8692%" height="15" fill="rgb(226,3,54)" fg:x="17" fg:w="2"/><text x="16.1379%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.93%)</title><rect x="16.8224%" y="149" width="0.9346%" height="15" fill="rgb(245,192,40)" fg:x="18" fg:w="1"/><text x="17.0724%" y="159.50"></text></g><g><title>smith-test`&lt;serde_transcode::Visitor&lt;S&gt; as serde::de::Visitor&gt;::visit_seq (19 samples, 17.76%)</title><rect x="0.9346%" y="373" width="17.7570%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="19"/><text x="1.1846%" y="383.50">smith-test`&lt;serde_transcode:..</text></g><g><title>smith-test`&lt;json5::de::Seq as serde::de::SeqAccess&gt;::next_element_seed (19 samples, 17.76%)</title><rect x="0.9346%" y="357" width="17.7570%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="19"/><text x="1.1846%" y="367.50">smith-test`&lt;json5::de::Seq a..</text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (19 samples, 17.76%)</title><rect x="0.9346%" y="341" width="17.7570%" height="15" fill="rgb(231,60,39)" fg:x="1" fg:w="19"/><text x="1.1846%" y="351.50">smith-test`&lt;serde_transcode:..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (19 samples, 17.76%)</title><rect x="0.9346%" y="325" width="17.7570%" height="15" fill="rgb(208,69,12)" fg:x="1" fg:w="19"/><text x="1.1846%" y="335.50">smith-test`&lt;&amp;mut json5::de::..</text></g><g><title>smith-test`json5::de::Map::new (1 samples, 0.93%)</title><rect x="17.7570%" y="309" width="0.9346%" height="15" fill="rgb(235,93,37)" fg:x="19" fg:w="1"/><text x="18.0070%" y="319.50"></text></g><g><title>smith-test`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.93%)</title><rect x="17.7570%" y="293" width="0.9346%" height="15" fill="rgb(213,116,39)" fg:x="19" fg:w="1"/><text x="18.0070%" y="303.50"></text></g><g><title>smith-test`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.93%)</title><rect x="17.7570%" y="277" width="0.9346%" height="15" fill="rgb(222,207,29)" fg:x="19" fg:w="1"/><text x="18.0070%" y="287.50"></text></g><g><title>smith-test`alloc::raw_vec::finish_grow (1 samples, 0.93%)</title><rect x="17.7570%" y="261" width="0.9346%" height="15" fill="rgb(206,96,30)" fg:x="19" fg:w="1"/><text x="18.0070%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.93%)</title><rect x="17.7570%" y="245" width="0.9346%" height="15" fill="rgb(218,138,4)" fg:x="19" fg:w="1"/><text x="18.0070%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.93%)</title><rect x="17.7570%" y="229" width="0.9346%" height="15" fill="rgb(250,191,14)" fg:x="19" fg:w="1"/><text x="18.0070%" y="239.50"></text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (20 samples, 18.69%)</title><rect x="0.9346%" y="485" width="18.6916%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="20"/><text x="1.1846%" y="495.50">smith-test`&lt;serde_transcode::..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (20 samples, 18.69%)</title><rect x="0.9346%" y="469" width="18.6916%" height="15" fill="rgb(206,27,48)" fg:x="1" fg:w="20"/><text x="1.1846%" y="479.50">smith-test`&lt;&amp;mut json5::de::D..</text></g><g><title>smith-test`&lt;serde_transcode::Visitor&lt;S&gt; as serde::de::Visitor&gt;::visit_map (20 samples, 18.69%)</title><rect x="0.9346%" y="453" width="18.6916%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="20"/><text x="1.1846%" y="463.50">smith-test`&lt;serde_transcode::..</text></g><g><title>smith-test`&lt;json5::de::Map as serde::de::MapAccess&gt;::next_value_seed (20 samples, 18.69%)</title><rect x="0.9346%" y="437" width="18.6916%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="20"/><text x="1.1846%" y="447.50">smith-test`&lt;json5::de::Map as..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeMap&gt;::serialize_value (20 samples, 18.69%)</title><rect x="0.9346%" y="421" width="18.6916%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="20"/><text x="1.1846%" y="431.50">smith-test`&lt;smith_core::ser::..</text></g><g><title>smith-test`&lt;serde_transcode::Transcoder&lt;D&gt; as serde::ser::Serialize&gt;::serialize (20 samples, 18.69%)</title><rect x="0.9346%" y="405" width="18.6916%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="20"/><text x="1.1846%" y="415.50">smith-test`&lt;serde_transcode::..</text></g><g><title>smith-test`&lt;&amp;mut json5::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (20 samples, 18.69%)</title><rect x="0.9346%" y="389" width="18.6916%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="20"/><text x="1.1846%" y="399.50">smith-test`&lt;&amp;mut json5::de::D..</text></g><g><title>smith-test`json5::de::Map::new (1 samples, 0.93%)</title><rect x="18.6916%" y="373" width="0.9346%" height="15" fill="rgb(251,118,11)" fg:x="20" fg:w="1"/><text x="18.9416%" y="383.50"></text></g><g><title>smith-test`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.93%)</title><rect x="18.6916%" y="357" width="0.9346%" height="15" fill="rgb(217,147,25)" fg:x="20" fg:w="1"/><text x="18.9416%" y="367.50"></text></g><g><title>smith-test`&lt;pest::iterators::pairs::Pairs&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.93%)</title><rect x="18.6916%" y="341" width="0.9346%" height="15" fill="rgb(247,81,37)" fg:x="20" fg:w="1"/><text x="18.9416%" y="351.50"></text></g><g><title>smith-test`pest::iterators::pairs::new (2 samples, 1.87%)</title><rect x="19.6262%" y="453" width="1.8692%" height="15" fill="rgb(209,12,38)" fg:x="21" fg:w="2"/><text x="19.8762%" y="463.50">s..</text></g><g><title>smith-test`pest::iterators::line_index::LineIndex::new (2 samples, 1.87%)</title><rect x="19.6262%" y="437" width="1.8692%" height="15" fill="rgb(227,1,9)" fg:x="21" fg:w="2"/><text x="19.8762%" y="447.50">s..</text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.93%)</title><rect x="21.4953%" y="357" width="0.9346%" height="15" fill="rgb(248,47,43)" fg:x="23" fg:w="1"/><text x="21.7453%" y="367.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.93%)</title><rect x="22.4299%" y="341" width="0.9346%" height="15" fill="rgb(221,10,30)" fg:x="24" fg:w="1"/><text x="22.6799%" y="351.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="22.4299%" y="325" width="0.9346%" height="15" fill="rgb(210,229,1)" fg:x="24" fg:w="1"/><text x="22.6799%" y="335.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (4 samples, 3.74%)</title><rect x="22.4299%" y="357" width="3.7383%" height="15" fill="rgb(222,148,37)" fg:x="24" fg:w="4"/><text x="22.6799%" y="367.50">smit..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (3 samples, 2.80%)</title><rect x="23.3645%" y="341" width="2.8037%" height="15" fill="rgb(234,67,33)" fg:x="25" fg:w="3"/><text x="23.6145%" y="351.50">sm..</text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::increment_depth (1 samples, 0.93%)</title><rect x="26.1682%" y="357" width="0.9346%" height="15" fill="rgb(247,98,35)" fg:x="28" fg:w="1"/><text x="26.4182%" y="367.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="27.1028%" y="357" width="0.9346%" height="15" fill="rgb(247,138,52)" fg:x="29" fg:w="1"/><text x="27.3528%" y="367.50"></text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::limit_reached (1 samples, 0.93%)</title><rect x="27.1028%" y="341" width="0.9346%" height="15" fill="rgb(213,79,30)" fg:x="29" fg:w="1"/><text x="27.3528%" y="351.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip::_{{closure}}::_{{closure}}::_{{closure}} (2 samples, 1.87%)</title><rect x="28.0374%" y="325" width="1.8692%" height="15" fill="rgb(246,177,23)" fg:x="30" fg:w="2"/><text x="28.2874%" y="335.50">s..</text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::increment_depth (1 samples, 0.93%)</title><rect x="28.9720%" y="309" width="0.9346%" height="15" fill="rgb(230,62,27)" fg:x="31" fg:w="1"/><text x="29.2220%" y="319.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (3 samples, 2.80%)</title><rect x="28.0374%" y="341" width="2.8037%" height="15" fill="rgb(216,154,8)" fg:x="30" fg:w="3"/><text x="28.2874%" y="351.50">sm..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="29.9065%" y="325" width="0.9346%" height="15" fill="rgb(244,35,45)" fg:x="32" fg:w="1"/><text x="30.1565%" y="335.50"></text></g><g><title>smith-test`core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.93%)</title><rect x="30.8411%" y="341" width="0.9346%" height="15" fill="rgb(251,115,12)" fg:x="33" fg:w="1"/><text x="31.0911%" y="351.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (1 samples, 0.93%)</title><rect x="32.7103%" y="325" width="0.9346%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="1"/><text x="32.9603%" y="335.50"></text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::limit_reached (1 samples, 0.93%)</title><rect x="33.6449%" y="309" width="0.9346%" height="15" fill="rgb(233,84,52)" fg:x="36" fg:w="1"/><text x="33.8949%" y="319.50"></text></g><g><title>smith-test`core::result::Result&lt;T,E&gt;::or_else (2 samples, 1.87%)</title><rect x="33.6449%" y="325" width="1.8692%" height="15" fill="rgb(207,117,47)" fg:x="36" fg:w="2"/><text x="33.8949%" y="335.50">s..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (1 samples, 0.93%)</title><rect x="34.5794%" y="309" width="0.9346%" height="15" fill="rgb(249,43,39)" fg:x="37" fg:w="1"/><text x="34.8294%" y="319.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (7 samples, 6.54%)</title><rect x="31.7757%" y="341" width="6.5421%" height="15" fill="rgb(209,38,44)" fg:x="34" fg:w="7"/><text x="32.0257%" y="351.50">smith-tes..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (3 samples, 2.80%)</title><rect x="35.5140%" y="325" width="2.8037%" height="15" fill="rgb(236,212,23)" fg:x="38" fg:w="3"/><text x="35.7640%" y="335.50">sm..</text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (3 samples, 2.80%)</title><rect x="39.2523%" y="325" width="2.8037%" height="15" fill="rgb(242,79,21)" fg:x="42" fg:w="3"/><text x="39.5023%" y="335.50">sm..</text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.93%)</title><rect x="41.1215%" y="309" width="0.9346%" height="15" fill="rgb(211,96,35)" fg:x="44" fg:w="1"/><text x="41.3715%" y="319.50"></text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::increment_depth (1 samples, 0.93%)</title><rect x="41.1215%" y="293" width="0.9346%" height="15" fill="rgb(253,215,40)" fg:x="44" fg:w="1"/><text x="41.3715%" y="303.50"></text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::increment_depth (1 samples, 0.93%)</title><rect x="42.0561%" y="325" width="0.9346%" height="15" fill="rgb(211,81,21)" fg:x="45" fg:w="1"/><text x="42.3061%" y="335.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip::_{{closure}}::_{{closure}}::_{{closure}} (2 samples, 1.87%)</title><rect x="42.9907%" y="293" width="1.8692%" height="15" fill="rgb(208,190,38)" fg:x="46" fg:w="2"/><text x="43.2407%" y="303.50">s..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="43.9252%" y="277" width="0.9346%" height="15" fill="rgb(235,213,38)" fg:x="47" fg:w="1"/><text x="44.1752%" y="287.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (5 samples, 4.67%)</title><rect x="42.9907%" y="309" width="4.6729%" height="15" fill="rgb(237,122,38)" fg:x="46" fg:w="5"/><text x="43.2407%" y="319.50">smith..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (3 samples, 2.80%)</title><rect x="44.8598%" y="293" width="2.8037%" height="15" fill="rgb(244,218,35)" fg:x="48" fg:w="3"/><text x="45.1098%" y="303.50">sm..</text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::visible::numeric_literal (1 samples, 0.93%)</title><rect x="47.6636%" y="309" width="0.9346%" height="15" fill="rgb(240,68,47)" fg:x="51" fg:w="1"/><text x="47.9136%" y="319.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (1 samples, 0.93%)</title><rect x="48.5981%" y="293" width="0.9346%" height="15" fill="rgb(210,16,53)" fg:x="52" fg:w="1"/><text x="48.8481%" y="303.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="48.5981%" y="277" width="0.9346%" height="15" fill="rgb(235,124,12)" fg:x="52" fg:w="1"/><text x="48.8481%" y="287.50"></text></g><g><title>smith-test`core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.93%)</title><rect x="49.5327%" y="293" width="0.9346%" height="15" fill="rgb(224,169,11)" fg:x="53" fg:w="1"/><text x="49.7827%" y="303.50"></text></g><g><title>smith-test`core::result::Result&lt;T,E&gt;::or_else (1 samples, 0.93%)</title><rect x="52.3364%" y="277" width="0.9346%" height="15" fill="rgb(250,166,2)" fg:x="56" fg:w="1"/><text x="52.5864%" y="287.50"></text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::limit_reached (2 samples, 1.87%)</title><rect x="53.2710%" y="277" width="1.8692%" height="15" fill="rgb(242,216,29)" fg:x="57" fg:w="2"/><text x="53.5210%" y="287.50">s..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (7 samples, 6.54%)</title><rect x="50.4673%" y="293" width="6.5421%" height="15" fill="rgb(230,116,27)" fg:x="54" fg:w="7"/><text x="50.7173%" y="303.50">smith-tes..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (2 samples, 1.87%)</title><rect x="55.1402%" y="277" width="1.8692%" height="15" fill="rgb(228,99,48)" fg:x="59" fg:w="2"/><text x="55.3902%" y="287.50">s..</text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::visible::unicode_letter (1 samples, 0.93%)</title><rect x="56.0748%" y="261" width="0.9346%" height="15" fill="rgb(253,11,6)" fg:x="60" fg:w="1"/><text x="56.3248%" y="271.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (16 samples, 14.95%)</title><rect x="42.9907%" y="325" width="14.9533%" height="15" fill="rgb(247,143,39)" fg:x="46" fg:w="16"/><text x="43.2407%" y="335.50">smith-test`pest::parser..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (10 samples, 9.35%)</title><rect x="48.5981%" y="309" width="9.3458%" height="15" fill="rgb(236,97,10)" fg:x="52" fg:w="10"/><text x="48.8481%" y="319.50">smith-test`pe..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (1 samples, 0.93%)</title><rect x="57.0093%" y="293" width="0.9346%" height="15" fill="rgb(233,208,19)" fg:x="61" fg:w="1"/><text x="57.2593%" y="303.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::visible::numeric_literal (1 samples, 0.93%)</title><rect x="57.0093%" y="277" width="0.9346%" height="15" fill="rgb(216,164,2)" fg:x="61" fg:w="1"/><text x="57.2593%" y="287.50"></text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::increment_depth (1 samples, 0.93%)</title><rect x="57.0093%" y="261" width="0.9346%" height="15" fill="rgb(220,129,5)" fg:x="61" fg:w="1"/><text x="57.2593%" y="271.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (2 samples, 1.87%)</title><rect x="57.9439%" y="309" width="1.8692%" height="15" fill="rgb(242,17,10)" fg:x="62" fg:w="2"/><text x="58.1939%" y="319.50">s..</text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::limit_reached (1 samples, 0.93%)</title><rect x="58.8785%" y="293" width="0.9346%" height="15" fill="rgb(242,107,0)" fg:x="63" fg:w="1"/><text x="59.1285%" y="303.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip::_{{closure}}::_{{closure}}::_{{closure}} (1 samples, 0.93%)</title><rect x="59.8131%" y="277" width="0.9346%" height="15" fill="rgb(251,28,31)" fg:x="64" fg:w="1"/><text x="60.0631%" y="287.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="59.8131%" y="261" width="0.9346%" height="15" fill="rgb(233,223,10)" fg:x="64" fg:w="1"/><text x="60.0631%" y="271.50"></text></g><g><title>smith-test`&lt;json5::de::Parser as pest::parser::Parser&lt;json5::de::Rule&gt;&gt;::parse::rules::hidden::skip (5 samples, 4.67%)</title><rect x="59.8131%" y="293" width="4.6729%" height="15" fill="rgb(215,21,27)" fg:x="64" fg:w="5"/><text x="60.0631%" y="303.50">smith..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (4 samples, 3.74%)</title><rect x="60.7477%" y="277" width="3.7383%" height="15" fill="rgb(232,23,21)" fg:x="65" fg:w="4"/><text x="60.9977%" y="287.50">smit..</text></g><g><title>smith-test`pest::parser_state::CallLimitTracker::limit_reached (1 samples, 0.93%)</title><rect x="64.4860%" y="277" width="0.9346%" height="15" fill="rgb(244,5,23)" fg:x="69" fg:w="1"/><text x="64.7360%" y="287.50"></text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::atomic (1 samples, 0.93%)</title><rect x="65.4206%" y="277" width="0.9346%" height="15" fill="rgb(226,81,46)" fg:x="70" fg:w="1"/><text x="65.6706%" y="287.50"></text></g><g><title>smith-test`smith_core::Smith::json2binary (71 samples, 66.36%)</title><rect x="0.9346%" y="501" width="66.3551%" height="15" fill="rgb(247,70,30)" fg:x="1" fg:w="71"/><text x="1.1846%" y="511.50">smith-test`smith_core::Smith::json2binary</text></g><g><title>smith-test`json5::de::Deserializer::from_str (51 samples, 47.66%)</title><rect x="19.6262%" y="485" width="47.6636%" height="15" fill="rgb(212,68,19)" fg:x="21" fg:w="51"/><text x="19.8762%" y="495.50">smith-test`json5::de::Deserializer::from_str</text></g><g><title>smith-test`pest::parser_state::state (51 samples, 47.66%)</title><rect x="19.6262%" y="469" width="47.6636%" height="15" fill="rgb(240,187,13)" fg:x="21" fg:w="51"/><text x="19.8762%" y="479.50">smith-test`pest::parser_state::state</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (49 samples, 45.79%)</title><rect x="21.4953%" y="453" width="45.7944%" height="15" fill="rgb(223,113,26)" fg:x="23" fg:w="49"/><text x="21.7453%" y="463.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::rule</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (49 samples, 45.79%)</title><rect x="21.4953%" y="437" width="45.7944%" height="15" fill="rgb(206,192,2)" fg:x="23" fg:w="49"/><text x="21.7453%" y="447.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (49 samples, 45.79%)</title><rect x="21.4953%" y="421" width="45.7944%" height="15" fill="rgb(241,108,4)" fg:x="23" fg:w="49"/><text x="21.7453%" y="431.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::rule</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (49 samples, 45.79%)</title><rect x="21.4953%" y="405" width="45.7944%" height="15" fill="rgb(247,173,49)" fg:x="23" fg:w="49"/><text x="21.7453%" y="415.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (49 samples, 45.79%)</title><rect x="21.4953%" y="389" width="45.7944%" height="15" fill="rgb(224,114,35)" fg:x="23" fg:w="49"/><text x="21.7453%" y="399.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::rule</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (49 samples, 45.79%)</title><rect x="21.4953%" y="373" width="45.7944%" height="15" fill="rgb(245,159,27)" fg:x="23" fg:w="49"/><text x="21.7453%" y="383.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (42 samples, 39.25%)</title><rect x="28.0374%" y="357" width="39.2523%" height="15" fill="rgb(245,172,44)" fg:x="30" fg:w="42"/><text x="28.2874%" y="367.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (31 samples, 28.97%)</title><rect x="38.3178%" y="341" width="28.9720%" height="15" fill="rgb(236,23,11)" fg:x="41" fg:w="31"/><text x="38.5678%" y="351.50">smith-test`pest::parser_state::ParserState&lt;R&gt;::..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (10 samples, 9.35%)</title><rect x="57.9439%" y="325" width="9.3458%" height="15" fill="rgb(205,117,38)" fg:x="62" fg:w="10"/><text x="58.1939%" y="335.50">smith-test`pe..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::rule (8 samples, 7.48%)</title><rect x="59.8131%" y="309" width="7.4766%" height="15" fill="rgb(237,72,25)" fg:x="64" fg:w="8"/><text x="60.0631%" y="319.50">smith-test..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (3 samples, 2.80%)</title><rect x="64.4860%" y="293" width="2.8037%" height="15" fill="rgb(244,70,9)" fg:x="69" fg:w="3"/><text x="64.7360%" y="303.50">sm..</text></g><g><title>smith-test`pest::parser_state::ParserState&lt;R&gt;::sequence (1 samples, 0.93%)</title><rect x="66.3551%" y="277" width="0.9346%" height="15" fill="rgb(217,125,39)" fg:x="71" fg:w="1"/><text x="66.6051%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.93%)</title><rect x="67.2897%" y="437" width="0.9346%" height="15" fill="rgb(235,36,10)" fg:x="72" fg:w="1"/><text x="67.5397%" y="447.50"></text></g><g><title>smith-test`&lt;&amp;mut smith_core::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.93%)</title><rect x="69.1589%" y="405" width="0.9346%" height="15" fill="rgb(251,123,47)" fg:x="74" fg:w="1"/><text x="69.4089%" y="415.50"></text></g><g><title>smith-test`core::ptr::drop_in_place&lt;smith_core::smith_serde::Error&gt; (2 samples, 1.87%)</title><rect x="70.0935%" y="357" width="1.8692%" height="15" fill="rgb(221,13,13)" fg:x="75" fg:w="2"/><text x="70.3435%" y="367.50">s..</text></g><g><title>smith-test`&lt;&amp;mut smith_core::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (3 samples, 2.80%)</title><rect x="70.0935%" y="389" width="2.8037%" height="15" fill="rgb(238,131,9)" fg:x="75" fg:w="3"/><text x="70.3435%" y="399.50">sm..</text></g><g><title>smith-test`serde::de::impls::_&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (3 samples, 2.80%)</title><rect x="70.0935%" y="373" width="2.8037%" height="15" fill="rgb(211,50,8)" fg:x="75" fg:w="3"/><text x="70.3435%" y="383.50">sm..</text></g><g><title>smith-test`core::str::converts::from_utf8 (1 samples, 0.93%)</title><rect x="71.9626%" y="357" width="0.9346%" height="15" fill="rgb(245,182,24)" fg:x="77" fg:w="1"/><text x="72.2126%" y="367.50"></text></g><g><title>smith-test`&lt;&amp;mut smith_core::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (5 samples, 4.67%)</title><rect x="69.1589%" y="421" width="4.6729%" height="15" fill="rgb(242,14,37)" fg:x="74" fg:w="5"/><text x="69.4089%" y="431.50">smith..</text></g><g><title>smith-test`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (4 samples, 3.74%)</title><rect x="70.0935%" y="405" width="3.7383%" height="15" fill="rgb(246,228,12)" fg:x="75" fg:w="4"/><text x="70.3435%" y="415.50">smit..</text></g><g><title>smith-test`serde::de::impls::_&lt;impl serde::de::Deserialize for &amp;str&gt;::deserialize (1 samples, 0.93%)</title><rect x="72.8972%" y="389" width="0.9346%" height="15" fill="rgb(213,55,15)" fg:x="78" fg:w="1"/><text x="73.1472%" y="399.50"></text></g><g><title>smith-test`core::ptr::drop_in_place&lt;smith_core::smith_serde::Error&gt; (3 samples, 2.80%)</title><rect x="73.8318%" y="421" width="2.8037%" height="15" fill="rgb(209,9,3)" fg:x="79" fg:w="3"/><text x="74.0818%" y="431.50">sm..</text></g><g><title>smith-test`smith_core::de::from_bytes (12 samples, 11.21%)</title><rect x="67.2897%" y="501" width="11.2150%" height="15" fill="rgb(230,59,30)" fg:x="72" fg:w="12"/><text x="67.5397%" y="511.50">smith-test`smith_..</text></g><g><title>smith-test`&lt;&amp;mut smith_core::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (12 samples, 11.21%)</title><rect x="67.2897%" y="485" width="11.2150%" height="15" fill="rgb(209,121,21)" fg:x="72" fg:w="12"/><text x="67.5397%" y="495.50">smith-test`&lt;&amp;mut ..</text></g><g><title>smith-test`&lt;&amp;mut smith_core::de::Deserializer as serde::de::Deserializer&gt;::deserialize_any (12 samples, 11.21%)</title><rect x="67.2897%" y="469" width="11.2150%" height="15" fill="rgb(220,109,13)" fg:x="72" fg:w="12"/><text x="67.5397%" y="479.50">smith-test`&lt;&amp;mut ..</text></g><g><title>smith-test`&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (12 samples, 11.21%)</title><rect x="67.2897%" y="453" width="11.2150%" height="15" fill="rgb(232,18,1)" fg:x="72" fg:w="12"/><text x="67.5397%" y="463.50">smith-test`&lt;serde..</text></g><g><title>smith-test`&lt;&amp;mut smith_core::de::Deserializer as serde::de::Deserializer&gt;::deserialize_struct (11 samples, 10.28%)</title><rect x="68.2243%" y="437" width="10.2804%" height="15" fill="rgb(215,41,42)" fg:x="73" fg:w="11"/><text x="68.4743%" y="447.50">smith-test`&lt;&amp;mu..</text></g><g><title>smith-test`smith_core::de::Deserializer::read_str (2 samples, 1.87%)</title><rect x="76.6355%" y="421" width="1.8692%" height="15" fill="rgb(224,123,36)" fg:x="82" fg:w="2"/><text x="76.8855%" y="431.50">s..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeStruct&gt;::serialize_field (2 samples, 1.87%)</title><rect x="78.5047%" y="453" width="1.8692%" height="15" fill="rgb(240,125,3)" fg:x="84" fg:w="2"/><text x="78.7547%" y="463.50">s..</text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.93%)</title><rect x="81.3084%" y="437" width="0.9346%" height="15" fill="rgb(205,98,50)" fg:x="87" fg:w="1"/><text x="81.5584%" y="447.50"></text></g><g><title>smith-test`&lt;&amp;mut smith_core::ser::Serializer as serde::ser::Serializer&gt;::serialize_seq (1 samples, 0.93%)</title><rect x="83.1776%" y="421" width="0.9346%" height="15" fill="rgb(205,185,37)" fg:x="89" fg:w="1"/><text x="83.4276%" y="431.50"></text></g><g><title>smith-test`&lt;&amp;mut smith_core::ser::Serializer as serde::ser::Serializer&gt;::serialize_u64 (1 samples, 0.93%)</title><rect x="83.1776%" y="405" width="0.9346%" height="15" fill="rgb(238,207,15)" fg:x="89" fg:w="1"/><text x="83.4276%" y="415.50"></text></g><g><title>smith-test`Dynum::encode_into (1 samples, 0.93%)</title><rect x="83.1776%" y="389" width="0.9346%" height="15" fill="rgb(213,199,42)" fg:x="89" fg:w="1"/><text x="83.4276%" y="399.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (2 samples, 1.87%)</title><rect x="84.1121%" y="405" width="1.8692%" height="15" fill="rgb(235,201,11)" fg:x="90" fg:w="2"/><text x="84.3621%" y="415.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.93%)</title><rect x="86.9159%" y="389" width="0.9346%" height="15" fill="rgb(207,46,11)" fg:x="93" fg:w="1"/><text x="87.1659%" y="399.50"></text></g><g><title>smith-test`smith_core::ser::to_binary (11 samples, 10.28%)</title><rect x="78.5047%" y="501" width="10.2804%" height="15" fill="rgb(241,35,35)" fg:x="84" fg:w="11"/><text x="78.7547%" y="511.50">smith-test`smit..</text></g><g><title>smith-test`smith_test::Types::_::_&lt;impl serde::ser::Serialize for smith_test::Types::Root&gt;::serialize (11 samples, 10.28%)</title><rect x="78.5047%" y="485" width="10.2804%" height="15" fill="rgb(243,32,47)" fg:x="84" fg:w="11"/><text x="78.7547%" y="495.50">smith-test`smit..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeStruct&gt;::serialize_field (11 samples, 10.28%)</title><rect x="78.5047%" y="469" width="10.2804%" height="15" fill="rgb(247,202,23)" fg:x="84" fg:w="11"/><text x="78.7547%" y="479.50">smith-test`&lt;smi..</text></g><g><title>smith-test`smith_test::Types::_::_&lt;impl serde::ser::Serialize for smith_test::Types::Person&gt;::serialize (9 samples, 8.41%)</title><rect x="80.3738%" y="453" width="8.4112%" height="15" fill="rgb(219,102,11)" fg:x="86" fg:w="9"/><text x="80.6238%" y="463.50">smith-test`s..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeStruct&gt;::serialize_field (7 samples, 6.54%)</title><rect x="82.2430%" y="437" width="6.5421%" height="15" fill="rgb(243,110,44)" fg:x="88" fg:w="7"/><text x="82.4930%" y="447.50">smith-tes..</text></g><g><title>smith-test`smith_test::Types::_::_&lt;impl serde::ser::Serialize for smith_test::Types::SimplePerson&gt;::serialize (5 samples, 4.67%)</title><rect x="84.1121%" y="421" width="4.6729%" height="15" fill="rgb(222,74,54)" fg:x="90" fg:w="5"/><text x="84.3621%" y="431.50">smith..</text></g><g><title>smith-test`&lt;smith_core::ser::serialize_struct::StructEnumSerializer as serde::ser::SerializeStruct&gt;::serialize_field (3 samples, 2.80%)</title><rect x="85.9813%" y="405" width="2.8037%" height="15" fill="rgb(216,99,12)" fg:x="92" fg:w="3"/><text x="86.2313%" y="415.50">sm..</text></g><g><title>smith-test`&lt;&amp;mut smith_core::ser::Serializer as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.93%)</title><rect x="87.8505%" y="389" width="0.9346%" height="15" fill="rgb(226,22,26)" fg:x="94" fg:w="1"/><text x="88.1005%" y="399.50"></text></g><g><title>dyld`start (105 samples, 98.13%)</title><rect x="0.0000%" y="597" width="98.1308%" height="15" fill="rgb(217,163,10)" fg:x="0" fg:w="105"/><text x="0.2500%" y="607.50">dyld`start</text></g><g><title>smith-test`main (105 samples, 98.13%)</title><rect x="0.0000%" y="581" width="98.1308%" height="15" fill="rgb(213,25,53)" fg:x="0" fg:w="105"/><text x="0.2500%" y="591.50">smith-test`main</text></g><g><title>smith-test`std::rt::lang_start_internal (105 samples, 98.13%)</title><rect x="0.0000%" y="565" width="98.1308%" height="15" fill="rgb(252,105,26)" fg:x="0" fg:w="105"/><text x="0.2500%" y="575.50">smith-test`std::rt::lang_start_internal</text></g><g><title>smith-test`std::rt::lang_start::_{{closure}} (104 samples, 97.20%)</title><rect x="0.9346%" y="549" width="97.1963%" height="15" fill="rgb(220,39,43)" fg:x="1" fg:w="104"/><text x="1.1846%" y="559.50">smith-test`std::rt::lang_start::_{{closure}}</text></g><g><title>smith-test`std::sys_common::backtrace::__rust_begin_short_backtrace (104 samples, 97.20%)</title><rect x="0.9346%" y="533" width="97.1963%" height="15" fill="rgb(229,68,48)" fg:x="1" fg:w="104"/><text x="1.1846%" y="543.50">smith-test`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>smith-test`smith_test::main (104 samples, 97.20%)</title><rect x="0.9346%" y="517" width="97.1963%" height="15" fill="rgb(252,8,32)" fg:x="1" fg:w="104"/><text x="1.1846%" y="527.50">smith-test`smith_test::main</text></g><g><title>smith-test`std::fs::write::inner (10 samples, 9.35%)</title><rect x="88.7850%" y="501" width="9.3458%" height="15" fill="rgb(223,20,43)" fg:x="95" fg:w="10"/><text x="89.0350%" y="511.50">smith-test`st..</text></g><g><title>smith-test`std::sys::unix::fs::File::open_c (10 samples, 9.35%)</title><rect x="88.7850%" y="485" width="9.3458%" height="15" fill="rgb(229,81,49)" fg:x="95" fg:w="10"/><text x="89.0350%" y="495.50">smith-test`st..</text></g><g><title>libsystem_kernel.dylib`__open (10 samples, 9.35%)</title><rect x="88.7850%" y="469" width="9.3458%" height="15" fill="rgb(236,28,36)" fg:x="95" fg:w="10"/><text x="89.0350%" y="479.50">libsystem_ker..</text></g><g><title>all (107 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(249,185,26)" fg:x="0" fg:w="107"/><text x="0.2500%" y="623.50"></text></g><g><title>libsystem_kernel.dylib`__open (2 samples, 1.87%)</title><rect x="98.1308%" y="597" width="1.8692%" height="15" fill="rgb(249,174,33)" fg:x="105" fg:w="2"/><text x="98.3808%" y="607.50">l..</text></g></svg></svg>